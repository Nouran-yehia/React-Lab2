{"ast":null,"code":"var _jsxFileName = \"/home/noura/my-app/src/PostsPage.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { withRouter } from 'react-router';\n\nclass PostsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: []\n    };\n    this.state = {\n      filtered: []\n    };\n  }\n\n  componentDidMount() {\n    debugger;\n    const {\n      match: {\n        params: {\n          userId\n        }\n      }\n    } = this.props;\n    const url = !userId ? 'https://jsonplaceholder.typicode.com/posts' : `https://jsonplaceholder.typicode.com/posts/?userId=${userId}`;\n    axios.get(url).then(result => {\n      this.setState({\n        posts: result.data\n      });\n    });\n  }\n\n  handleChange(e) {\n    // Variable to hold the original version of the list\n    let currentList = []; // Variable to hold the filtered list before putting into state\n\n    let newList = []; // If the search bar isn't empty\n\n    if (e.target.value !== \"\") {\n      // Assign the original list to currentList\n      currentList = this.props.items; // Use .filter() to determine which items should be displayed\n      // based on the search terms\n\n      newList = currentList.filter(item => {\n        // change current item to lowercase\n        const lc = item.toLowerCase(); // change search term to lowercase\n\n        const filter = e.target.value.toLowerCase(); // check to see if the current list item includes the search term\n        // If it does, it will be added to newList. Using lowercase eliminates\n        // issues with capitalization in search terms and search content\n\n        return lc.includes(filter);\n      });\n    } else {\n      // If the search bar is empty, set newList to original task list\n      newList = this.props.items;\n    } // Set the filtered state based on what our rules added to newList\n\n\n    this.setState({\n      filtered: newList\n    });\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"input\",\n      placeholder: \"Search...\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), this.state.posts.map(post => React.createElement(\"div\", {\n      className: \"post\",\n      key: \"post.id\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, post.id), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, post.title))));\n  }\n\n}\n\nexport default withRouter(PostsPage);","map":{"version":3,"sources":["/home/noura/my-app/src/PostsPage.js"],"names":["React","axios","withRouter","PostsPage","Component","constructor","props","state","posts","filtered","componentDidMount","match","params","userId","url","get","then","result","setState","data","handleChange","e","currentList","newList","target","value","items","filter","item","lc","toLowerCase","includes","bind","render","map","post","id","title"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,cAAzB;;AAEA,MAAMC,SAAN,SAAwBH,KAAK,CAACI,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAb;AACA,SAAKD,KAAL,GAAa;AACXE,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGH;;AACCC,EAAAA,iBAAiB,GAAG;AAClB;AACA,UAAM;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAC;AAAEC,UAAAA;AAAF;AAAT;AAAT,QAAiC,KAAKP,KAA5C;AACA,UAAMQ,GAAG,GAAC,CAACD,MAAD,GAAQ,4CAAR,GAAsD,sDAAqDA,MAAO,EAA5H;AACAZ,IAAAA,KAAK,CAACc,GAAN,CAAUD,GAAV,EAAeE,IAAf,CAAqBC,MAAD,IAAU;AAC9B,WAAKC,QAAL,CAAc;AAAEV,QAAAA,KAAK,EAAES,MAAM,CAACE;AAAhB,OAAd;AAAsC,KADtC;AAGD;;AAEDC,EAAAA,YAAY,CAACC,CAAD,EAAI;AACd;AACA,QAAIC,WAAW,GAAG,EAAlB,CAFc,CAGd;;AACA,QAAIC,OAAO,GAAG,EAAd,CAJc,CAMd;;AACA,QAAIF,CAAC,CAACG,MAAF,CAASC,KAAT,KAAmB,EAAvB,EAA2B;AACvB;AACJH,MAAAA,WAAW,GAAG,KAAKhB,KAAL,CAAWoB,KAAzB,CAF2B,CAIvB;AACA;;AACJH,MAAAA,OAAO,GAAGD,WAAW,CAACK,MAAZ,CAAmBC,IAAI,IAAI;AAC7B;AACR,cAAMC,EAAE,GAAGD,IAAI,CAACE,WAAL,EAAX,CAFqC,CAG7B;;AACR,cAAMH,MAAM,GAAGN,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeK,WAAf,EAAf,CAJqC,CAK7B;AACA;AACA;;AACR,eAAOD,EAAE,CAACE,QAAH,CAAYJ,MAAZ,CAAP;AACD,OATW,CAAV;AAUH,KAhBG,MAgBG;AACC;AACNJ,MAAAA,OAAO,GAAG,KAAKjB,KAAL,CAAWoB,KAArB;AACD,KA1BiB,CA2Bd;;;AACJ,SAAKR,QAAL,CAAc;AACZT,MAAAA,QAAQ,EAAEc;AADE,KAAd;AAGA,SAAKH,YAAL,GAAoB,KAAKA,YAAL,CAAkBY,IAAlB,CAAuB,IAAvB,CAApB;AACC;;AAGCC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,SAAS,EAAC,OAA7B;AAAqC,MAAA,WAAW,EAAC,WAAjD;AAA6D,MAAA,QAAQ,EAAE,KAAKb,YAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAIG,KAAKb,KAAL,CAAWC,KAAX,CAAiB0B,GAAjB,CAAqBC,IAAI,IACxB;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,GAAG,EAAC,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,IAAI,CAACC,EAAX,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMD,IAAI,CAACE,KAAX,CAFF,CADD,CAJH,CADF;AAaD;;AAlEqC;;AAqExC,eAAenC,UAAU,CAACC,SAAD,CAAzB","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport {withRouter} from 'react-router';\n\nclass PostsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { posts: [] };\n    this.state = {\n      filtered: []\n  }\n}\n  componentDidMount() {\n    debugger\n    const { match: { params:{ userId }}} = this.props;\n    const url=!userId?'https://jsonplaceholder.typicode.com/posts':`https://jsonplaceholder.typicode.com/posts/?userId=${userId}`;\n    axios.get(url).then((result)=>{\n    this.setState({ posts: result.data })}\n    )\n  }\n\n  handleChange(e) {\n    // Variable to hold the original version of the list\n    let currentList = [];\n    // Variable to hold the filtered list before putting into state\n    let newList = [];\n\n    // If the search bar isn't empty\n    if (e.target.value !== \"\") {\n        // Assign the original list to currentList\n    currentList = this.props.items;\n\n        // Use .filter() to determine which items should be displayed\n        // based on the search terms\n    newList = currentList.filter(item => {\n            // change current item to lowercase\n    const lc = item.toLowerCase();\n            // change search term to lowercase\n    const filter = e.target.value.toLowerCase();\n            // check to see if the current list item includes the search term\n            // If it does, it will be added to newList. Using lowercase eliminates\n            // issues with capitalization in search terms and search content\n    return lc.includes(filter);\n  });\n} else {\n        // If the search bar is empty, set newList to original task list\n  newList = this.props.items;\n}\n    // Set the filtered state based on what our rules added to newList\nthis.setState({\n  filtered: newList\n});\nthis.handleChange = this.handleChange.bind(this);\n}\n\n\n  render() {\n    return (\n      <div>\n        <div>\n          <input type=\"text\" className=\"input\" placeholder=\"Search...\" onChange={this.handleChange} />\n        </div>\n        {this.state.posts.map(post =>\n          <div className=\"post\" key=\"post.id\">\n            <div>{post.id}</div>\n            <div>{post.title}</div>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default withRouter(PostsPage);"]},"metadata":{},"sourceType":"module"}